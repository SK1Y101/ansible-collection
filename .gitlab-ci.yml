---
image: python:3.8.12-slim-buster # TODO gitlab registry

# TODO reuse Makefile - "make sanity", and docker dind.

variables:
  namespace: canonical
  collection: maas


stages:
  - test
  - build # build collection tar.gz
  - deploy # push collection tar.gz to galaxy

before_script:
  - pip3 install -r sanity.requirements -r test.requirements -r docs.requirements
  - apt update
  - apt install -y git shellcheck make

units:
  stage: test
  needs: []
  image: python:3.8.12-slim-buster
  script:
    - pip install ansible-core==2.13.1
    # ansible-test needs special directory structure.
    - mkdir -p /work-dir/ansible_collections/${namespace}/
    - cp -a ./  /work-dir/ansible_collections/${namespace}/${collection}
    - pushd /work-dir/ansible_collections/${namespace}/${collection}
    #
    # - ansible-test coverage erase --venv
    # Use venv, until we agree about dind - eventually we need to move to github anyway?
    - ansible-test units --coverage
    - ansible-test coverage html --requirements
    - ansible-test coverage report --omit 'tests/*' --show-missing
    - ls -al tests/output/reports/coverage
    #
    # Move artifacts back to initial dir, so they can be collected by gitlab.
    - popd
    - ART_DIR=tests/output/reports/coverage/
    - mkdir -p $ART_DIR
    - cp -a /work-dir/ansible_collections/${namespace}/${collection}/$ART_DIR $ART_DIR
    - ls -al $ART_DIR
  artifacts:
    name: ${collection}_html_coverage
    paths:
      - tests/output/reports/coverage
    expose_as: html_coverage
    expire_in: 10 week

sanity:
  stage: test
  needs: []
  image: python:3.8.12-slim-buster
  script:
    - pip install ansible-core==2.13.1
    # ansible-test needs special directory structure.
    - mkdir -p /work-dir/ansible_collections/${namespace}/
    - cp -a ./  /work-dir/ansible_collections/${namespace}/${collection}
    - pushd /work-dir/ansible_collections/${namespace}/${collection}
    #
    # Same as "make sanity"
    # TODO reuse Makefile
    - black -t py38 --check --diff --color plugins tests/unit
    - ansible-lint
    - flake8 --exclude tests/output/
    - ansible-test sanity

docs:
  stage: test
  needs: []
  image: python:3.8.12-slim-buster
  script:
    # ansible-test needs special directory structure.
    - mkdir -p /work-dir/ansible_collections/${namespace}/
    - cp -a ./  /work-dir/ansible_collections/${namespace}/${collection}
    - pushd /work-dir/ansible_collections/${namespace}/${collection}
    #
    - make docs
    #
    # Move artifacts back to initial dir, so they can be collected by gitlab.
    - popd
    - ART_DIR=docs/build/html
    - mkdir -p $ART_DIR
    - cp -a /work-dir/ansible_collections/${namespace}/${collection}/$ART_DIR $ART_DIR
    - ls -al $ART_DIR
  artifacts:
    name: ${collection}_html_docs
    paths:
      - docs/build/html/
    expose_as: html_docs
    expire_in: 10 week

# This takes long period
# Run it manually if serial integration tests execution is needed.
integration:
  stage: test
  needs: []
  image: python:3.8.12-slim-buster
  # we have a single cluster, so run at most one "ansible-test integration" at a time.
  resource_group: ${namespace}_${collection}_cluster_0
  script:
    - pip install ansible-core==2.13.1
    # ansible-test needs special directory structure.
    - mkdir -p /work-dir/ansible_collections/${namespace}/
    - cp -a ./  /work-dir/ansible_collections/${namespace}/${collection}
    - pushd /work-dir/ansible_collections/${namespace}/${collection}
    #
    - |
      cat <<EOF >tests/integration/integration_config.yml
      # Generated by .gitlab-ci.yml
      host: ${MAAS_HOST}
      token_key: ${MAAS_TOKEN_KEY}
      token_secret: ${MAAS_TOKEN_SECRET}
      customer_key: ${MAAS_CUSTOMER_KEY}
      EOF
    - cat tests/integration/integration_config.yml
    - ansible-test integration

build-tar-gz:
  stage: build
  needs: []
  image: python:3.8.12-slim-buster
  only:
    - develop
    - master
    - tags
    - build-collection
  script:
    - pip install ansible-core==2.13.1
    - ansible-galaxy collection build
  artifacts:
    paths:
      - ${namespace}-${collection}-*.tar.gz
