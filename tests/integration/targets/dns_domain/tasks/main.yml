---
- environment:
    MAAS_HOST: "{{ host }}"
    MAAS_TOKEN_KEY: "{{ token_key }}"
    MAAS_TOKEN_SECRET: "{{ token_secret }}"
    MAAS_CUSTOMER_KEY: "{{ customer_key }}"


  block:
    # Make first domain default, so we can delete test one if it staied default
    - name: List domains
      maas.maas.dns_domain_info:
      register: domains

    - ansible.builtin.set_fact:
        default_domain_name: "{{ domains.records[0].name }}"

    - name: Make first domain default
      maas.maas.dns_domain: &set_default
        name: "{{ default_domain_name }}"
        is_default: true
        state: present

    # Ensure that we start with clean environment
    - name: Delete domain - to have clean environment
      maas.maas.dns_domain: &delete
        name: test-domain
        state: absent

    # List all domains for later
    - name: List domains
      maas.maas.dns_domain_info:
      register: domains


    # Ensure that creating new domain reports changed
    - name: Create domain
      maas.maas.dns_domain: &create
        name: test-domain
        state: present
      register: test_domain

    - ansible.builtin.assert:
        that:
          - test_domain is changed
          - test_domain.record.name == "test-domain"
          - test_domain.record.is_default == false
          - test_domain.record.ttl is none
          - test_domain.record.authoritative == true

    # Ensure that creation is idempotent
    - name: Recreate domain
      maas.maas.dns_domain: *create
      register: test_domain

    - ansible.builtin.assert:
        that:
          - test_domain is not changed
          - test_domain.record.name == "test-domain"

    # Check setting one as default works
    - name: Set as default
      maas.maas.dns_domain:
        name: test-domain
        state: present
        is_default: true
      register: test_domain

    - ansible.builtin.assert:
        that:
          - test_domain is changed
          - test_domain.record.is_default == true

    # Check that setting optional value is working
    - name: Set ttl
      maas.maas.dns_domain:
        name: test-domain
        state: present
        ttl: 1800
      register: test_domain

    - ansible.builtin.assert:
        that:
          - test_domain is changed
          - test_domain.record.ttl == 1800
          - test_domain.record.authoritative == true

    # Check that omitting optional value is working. Authoritative changed, ttl skipped
    - name: Skip setting ttl
      maas.maas.dns_domain:
        name: test-domain
        state: present
        authoritative: false
      register: test_domain

    - ansible.builtin.assert:
        that:
          - test_domain is changed
          - test_domain.record.ttl == 1800
          - test_domain.record.authoritative == false

    # Deleting default should fail
    - name: Delete test domain, which is default
      maas.maas.dns_domain: *delete
      register: test_domain
      failed_when: test_domain is not failed

    # Ensure deleting reports changed
    - name: Make other domain default
      maas.maas.dns_domain: *set_default

    - name: Delete test domain
      maas.maas.dns_domain: *delete
      register: test_domain

    - ansible.builtin.assert:
        that:
          - test_domain is changed
          - test_domain.record is none

    # Ensure deleting of something that does not exist just returns
    - name: Redelete domain
      maas.maas.dns_domain: *delete
      register: test_domain

    - ansible.builtin.assert:
        that:
          - test_domain is not changed
          - test_domain.record is none
